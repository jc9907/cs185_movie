{"ast":null,"code":"/*\nCustom React Hooks\n*/\nimport { useState } from \"react\"; //react hooks generally have an internal state\n\n/*\nHow useForm works:\nit takes in an input callback(in GuestBook it is the function \"submit\"), for this hook to use\n\ntwo functions handleTextChange/handleSubmit and \"Values\" objects are passed back to the GuestBook\nand in GuestBook they are destructured like a struct\n\n*/\n\nconst useForm = callback => {\n  //callback: passed from GuestBook(main form) to update values\n  //declare way to set values\n  const [values, setValues] = useState({\n    guestName: \"\",\n    description: \"\",\n    message: \"\",\n    isPrivate: false,\n    email: \"\",\n    date: \"\"\n  }); //pulling the tuple to values, and setValues is the setter function\n  //new state for errors\n\n  const [errors, setErrors] = useState({\n    guestName: \"\",\n    description: \"\",\n    message: \"\",\n    isPrivate: \"\",\n    email: \"\",\n    hasError: \"\"\n  }); //just like declaring values and its setter setValues\n\n  var currYear = new Date().getFullYear();\n  var currMonth = new Date().getMonth() + 1;\n  var currDay = new Date().getDate(); //Current Date\n\n  console.log(\"date is: \" + currMonth + \" \" + currDay); //declare way on change event. Once the input tab is clicked, handler function receives an event.\n\n  const handleTextChange = event => {\n    //DEBUG MESSAGE: grab target(of what you are typing in)\n    console.log(event.target.name, \"value is:\" + event.target.value);\n    setValues({ ...values,\n      //'...' is the spread operator that iterate through objects declared in \"values\"\n      [event.target.name]: event.target.value //set name equal to the key\n\n    });\n  }; //Submission function\n\n\n  const handleSubmit = event => {\n    console.log(\"enter submit callback\");\n    event.preventDefault(); //prevent the default behavior so that the browser doesn't refresh itself\n\n    callback();\n  }; //returns values that will be used in GuestBook\n\n\n  return {\n    handleTextChange,\n    //return setter callback function\n    handleSubmit,\n    handleClickChange,\n    setValues,\n    //function method\n    values //return set values\n\n  };\n};\n\nexport default useForm; //export so that in GuestBook/other form page can destructure the returns","map":{"version":3,"sources":["/home/luyao/Desktop/CS185/my_movie_site/src/components/useForm.js"],"names":["useState","useForm","callback","values","setValues","guestName","description","message","isPrivate","email","date","errors","setErrors","hasError","currYear","Date","getFullYear","currMonth","getMonth","currDay","getDate","console","log","handleTextChange","event","target","name","value","handleSubmit","preventDefault","handleClickChange"],"mappings":"AAAA;;;AAGA,SAAQA,QAAR,QAAuB,OAAvB,C,CAAgC;;AAEhC;;;;;;;;;AAQA,MAAMC,OAAO,GAAIC,QAAD,IAAa;AAAG;AAI5B;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBJ,QAAQ,CAAC;AAACK,IAAAA,SAAS,EAAC,EAAX;AAAcC,IAAAA,WAAW,EAAC,EAA1B;AAA6BC,IAAAA,OAAO,EAAC,EAArC;AAAwCC,IAAAA,SAAS,EAAC,KAAlD;AAAwDC,IAAAA,KAAK,EAAC,EAA9D;AAAiEC,IAAAA,IAAI,EAAC;AAAtE,GAAD,CAAnC,CALyB,CAKsF;AAC/G;;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBZ,QAAQ,CAAC;AAACK,IAAAA,SAAS,EAAC,EAAX;AAAcC,IAAAA,WAAW,EAAC,EAA1B;AAA6BC,IAAAA,OAAO,EAAC,EAArC;AAAwCC,IAAAA,SAAS,EAAC,EAAlD;AAAqDC,IAAAA,KAAK,EAAC,EAA3D;AAA8DI,IAAAA,QAAQ,EAAC;AAAvE,GAAD,CAAnC,CAPyB,CAOwF;;AACjH,MAAIC,QAAQ,GAAI,IAAIC,IAAJ,GAAWC,WAAX,EAAhB;AACA,MAAIC,SAAS,GAAI,IAAIF,IAAJ,GAAWG,QAAX,KAAsB,CAAvC;AACA,MAAIC,OAAO,GAAI,IAAIJ,IAAJ,GAAWK,OAAX,EAAf,CAVyB,CAUc;;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAcL,SAAd,GAA0B,GAA1B,GAAgCE,OAA5C,EAXyB,CAYzB;;AACA,QAAMI,gBAAgB,GAAGC,KAAK,IAAG;AAC7B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,MAAN,CAAaC,IAAzB,EAA8B,cAAcF,KAAK,CAACC,MAAN,CAAaE,KAAzD;AAEAvB,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AACW;AACnB,OAACqB,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE,KAF1B,CAEiC;;AAFjC,KAAD,CAAT;AAID,GARH,CAbyB,CAyBvB;;;AACA,QAAMC,YAAY,GAAGJ,KAAK,IAAG;AAC3BH,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAE,IAAAA,KAAK,CAACK,cAAN,GAF2B,CAEH;;AAChB3B,IAAAA,QAAQ;AACf,GAJH,CA1BuB,CAgCvB;;;AACA,SAAM;AACAqB,IAAAA,gBADA;AACwB;AACxBK,IAAAA,YAFA;AAGAE,IAAAA,iBAHA;AAIA1B,IAAAA,SAJA;AAIsB;AACtBD,IAAAA,MALA,CAKqB;;AALrB,GAAN;AAOL,CAxCD;;AA0CA,eAAeF,OAAf,C,CAAwB","sourcesContent":["/*\nCustom React Hooks\n*/\nimport {useState} from \"react\"; //react hooks generally have an internal state\n\n/*\nHow useForm works:\nit takes in an input callback(in GuestBook it is the function \"submit\"), for this hook to use\n\ntwo functions handleTextChange/handleSubmit and \"Values\" objects are passed back to the GuestBook\nand in GuestBook they are destructured like a struct\n\n*/\nconst useForm = (callback) =>{  //callback: passed from GuestBook(main form) to update values\n                                              \n    \n    \n    //declare way to set values\n    const [values,setValues] = useState({guestName:\"\",description:\"\",message:\"\",isPrivate:false,email:\"\",date:\"\"}) //pulling the tuple to values, and setValues is the setter function\n    //new state for errors\n    const [errors,setErrors] = useState({guestName:\"\",description:\"\",message:\"\",isPrivate:\"\",email:\"\",hasError:\"\"}); //just like declaring values and its setter setValues\n    var currYear = (new Date().getFullYear());\n    var currMonth = (new Date().getMonth()+1);\n    var currDay = (new Date().getDate());  //Current Date\n    console.log(\"date is: \" + currMonth + \" \" + currDay)\n    //declare way on change event. Once the input tab is clicked, handler function receives an event.\n    const handleTextChange = event =>{\n        //DEBUG MESSAGE: grab target(of what you are typing in)\n        console.log(event.target.name,\"value is:\" + event.target.value)\n   \n        setValues({\n          ...values,         //'...' is the spread operator that iterate through objects declared in \"values\"\n          [event.target.name]: event.target.value, //set name equal to the key\n          });\n      };\n       \n\n\n      //Submission function\n      const handleSubmit = event =>{  \n        console.log(\"enter submit callback\")\n        event.preventDefault(); //prevent the default behavior so that the browser doesn't refresh itself\n                callback();            \n        }\n\n      //returns values that will be used in GuestBook\n      return{\n            handleTextChange,       //return setter callback function\n            handleSubmit,\n            handleClickChange,\n            setValues,            //function method\n            values,              //return set values\n      }\n};\n\nexport default useForm; //export so that in GuestBook/other form page can destructure the returns"]},"metadata":{},"sourceType":"module"}