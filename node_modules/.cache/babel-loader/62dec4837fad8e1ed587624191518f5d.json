{"ast":null,"code":"var _jsxFileName = \"/home/luyao/Desktop/CS185/my_movie_site/src/components/AddMovie.js\";\nimport React, { useEffect, useState } from 'react';\nimport '../App.css';\nimport config from './config.js';\nimport useForm from './useForm';\nimport { Alert } from 'reactstrap';\nimport movie_list from './movie_list.json';\n/*\nnode node_modules/reac  t-scripts/scripts/start.js\n\nFix react page doesn't update on file change *WORKS*\nsudo -i\necho 1048576 > /proc/sys/fs/inotify/max_user_watches\nexit\n\n*/\n\nconst firebase = require('firebase');\n\nfunction AddMovie() {\n  const [shouldRender, setShouldRender] = useState(true);\n  let scrollRef = null; //used to refer scrollRef, so that on content change window is scrolled to bottom automaticallu\n\n  const guestBookStyle = {\n    backgroundColor: '#eadedb',\n    backgroundRepeat: 'repeat-y',\n    position: 'relative',\n    height: '80vh',\n    width: '100%',\n    display: 'flex',\n    //alignItems: 'center',\n    //justifyContent: 'center',\n    fontFamily: 'Raleway, sans-serif',\n    fontStyle: '2px',\n    //textTransform: 'uppercase',\n    letterSpacing: '1px'\n  };\n  const formInputFontStyle = {\n    fontFamily: 'Raleway, sans-serif',\n    fontStyle: '32px',\n    marginBottom: '20px'\n  };\n  const formInputDivStyle = {\n    position: 'relative',\n    fontSize: '12px',\n    left: '10vw',\n    top: '8vh'\n  };\n  const formPrintDivStyle = {\n    position: 'absolute',\n    left: '35vw',\n    top: '8vh',\n    width: '60vw',\n    height: '60vh',\n    border: 'dotted blue',\n    borderWidth: '2px',\n    borderColor: '#2a4944'\n  };\n  const formLabelFontStyle = {\n    fontFamily: 'lucida grande,arial',\n    fontSize: '1vw',\n    fontWeight: 'bold',\n    color: '#2E4A62',\n    position: 'relative',\n    top: '0vw',\n    left: '-1vw'\n  };\n  useEffect(() => {\n    console.log(\"shouldRender: \" + shouldRender);\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n  });\n\n  const writeJsonFile = require('write-json-file');\n\n  const [data, setData] = useState([]);\n  const [values, setValues] = useState({\n    newMovieID: \"\"\n  });\n\n  const handleTextChange = event => {\n    console.log(event.target.name, \"new movie is:\" + event.target.value);\n    console.log(\"event.target.name is:\" + event.target.name);\n    setValues({\n      [event.target.name]: event.target.value\n    });\n    console.log(\"values.newMovieID\" + values.newMovieID);\n  }; //Submission function\n\n\n  const handleSubmit = event => {\n    console.log(\"enter submit callback for adding a new movie\");\n    event.preventDefault();\n    console.log(\"At submission, values.newMovieID is: \" + values.newMovieID);\n    let alreadyExist = false; //get a reference to the database\n\n    let AllLists = firebase.database().ref('AllLists');\n    let allMovies = AllLists.child('All');\n    allMovies.on('value', snapshot => {\n      const receivedJSON = snapshot.val();\n      console.log(receivedJSON);\n      snapshot.forEach(function (childSnapshot) {\n        var IMDbID = childSnapshot.child(\"IMDbID\").val();\n\n        if (IMDbID == values.newMovieID) {\n          alreadyExist = true;\n        }\n      });\n    });\n    if (alreadyExist) console.log(\"❌Movie already in database, not added\");else console.log('✅ Movie not in database, now add'); //if not existed in our own database, find it in IMDB and store to our own\n\n    if (!alreadyExist) {\n      const axios = require('axios').default; // axios.<method> will now provide autocomplete and parameter typings\n\n\n      let url = \"https://www.omdbapi.com/?apikey=16e23e6c&i=\" + values.newMovieID;\n      let recvPack = axios.get(url);\n      let packData;\n      let recvTitle;\n      let recvDirector;\n      let recvRating;\n      let recvPosterURL;\n      let recvActors;\n      let recvGenre;\n      axios.get(url).then(response => {\n        //A unique ID, Title, Poster source, Director, IMDbID, Actors\n        packData = response.data;\n        recvTitle = packData.Title;\n        recvDirector = packData.Director;\n        recvRating = packData.imdbRating;\n        recvPosterURL = packData.Poster;\n        recvActors = packData.Actors;\n        recvGenre = packData.Genre; //console.log(movieURLs[index])\n        //movieArray[index].title = packData.data.Title;                  //new value    \n      }).then(() => {\n        console.log(\"recvTitle is: \" + recvTitle);\n        console.log(\"recvDirector is: \" + recvDirector);\n        console.log(\"recvRating is: \" + recvRating);\n        console.log(\"recvPosterURL is: \" + recvPosterURL);\n        console.log(\"recvActors is: \" + recvActors);\n        console.log(\"recvGenre is: \" + recvGenre);\n        firebase.database().ref('AllLists').child('All').push({\n          IMDbID: values.newMovieID,\n          Title: recvTitle,\n          PosterURL: recvPosterURL,\n          Director: recvDirector,\n          Actors: recvActors,\n          Genre: recvGenre\n        });\n        movie_list.push({\n          \"key\": 16,\n          \"id\": values.newMovieID\n        });\n\n        (async () => {\n          await writeJsonFile('./movie_list.json', movie_list);\n        })();\n      });\n    }\n\n    setVisible(true); //set everything to default after submission\n\n    setValues({\n      newMovieID: \"\"\n    });\n  }; //used for configuring the alert box\n\n\n  const [visible, setVisible] = useState(false);\n\n  const onafterprint = () => setVisible(false);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"GuestBook\",\n    style: guestBookStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: formInputDivStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    style: formLabelFontStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \"IMDBid\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"newMovieID\",\n    type: \"newMovieID\",\n    value: values.newMovieID,\n    onChange: handleTextChange,\n    style: formInputFontStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: formInputDivStyle,\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, \"submit\")), /*#__PURE__*/React.createElement(Alert, {\n    style: formInputDivStyle,\n    color: \"info\",\n    isOpen: visible,\n    toggle: onafterprint,\n    fade: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }, \"Add request sent!\")));\n}\n\nexport default AddMovie;","map":{"version":3,"sources":["/home/luyao/Desktop/CS185/my_movie_site/src/components/AddMovie.js"],"names":["React","useEffect","useState","config","useForm","Alert","movie_list","firebase","require","AddMovie","shouldRender","setShouldRender","scrollRef","guestBookStyle","backgroundColor","backgroundRepeat","position","height","width","display","fontFamily","fontStyle","letterSpacing","formInputFontStyle","marginBottom","formInputDivStyle","fontSize","left","top","formPrintDivStyle","border","borderWidth","borderColor","formLabelFontStyle","fontWeight","color","console","log","apps","length","initializeApp","writeJsonFile","data","setData","values","setValues","newMovieID","handleTextChange","event","target","name","value","handleSubmit","preventDefault","alreadyExist","AllLists","database","ref","allMovies","child","on","snapshot","receivedJSON","val","forEach","childSnapshot","IMDbID","axios","default","url","recvPack","get","packData","recvTitle","recvDirector","recvRating","recvPosterURL","recvActors","recvGenre","then","response","Title","Director","imdbRating","Poster","Actors","Genre","push","PosterURL","setVisible","visible","onafterprint"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport '../App.css'\nimport config from './config.js'\nimport useForm from './useForm'\n\nimport { Alert } from 'reactstrap';\nimport movie_list from './movie_list.json'\n\n/*\nnode node_modules/reac  t-scripts/scripts/start.js\n\nFix react page doesn't update on file change *WORKS*\nsudo -i\necho 1048576 > /proc/sys/fs/inotify/max_user_watches\nexit\n\n*/\nconst firebase = require('firebase')\n\nfunction AddMovie(){\n  \n    const [shouldRender , setShouldRender] = useState(true)\n    \n\n    let scrollRef = null; //used to refer scrollRef, so that on content change window is scrolled to bottom automaticallu\n\n\n    const guestBookStyle={\n       \n        backgroundColor: '#eadedb',\n        backgroundRepeat: 'repeat-y',\n        position: 'relative',\n        height: '80vh',\n        width: '100%',\n        display: 'flex',\n        //alignItems: 'center',\n        //justifyContent: 'center',\n        fontFamily: 'Raleway, sans-serif',\n        fontStyle: '2px', \n        //textTransform: 'uppercase',\n        letterSpacing: '1px'\n    }\n    const formInputFontStyle={\n      fontFamily: 'Raleway, sans-serif',\n      fontStyle: '32px', \n      marginBottom: '20px',\n    }\n\n    const formInputDivStyle={\n      position: 'relative',\n      fontSize: '12px',\n      left:'10vw',\n      top: '8vh'\n    }\n\n    const formPrintDivStyle={\n      position: 'absolute',\n      left:'35vw',\n      top: '8vh',\n      width: '60vw',\n      height: '60vh',\n      border: 'dotted blue',\n      borderWidth: '2px',\n      borderColor: '#2a4944',\n    }\n\n    const formLabelFontStyle={\n      fontFamily: 'lucida grande,arial',\n      fontSize: '1vw',\n      fontWeight: 'bold',\n      color: '#2E4A62',\n      position: 'relative',\n      top: '0vw',\n      left:'-1vw'\n    }\n   \n    useEffect(() => {\n      console.log(\"shouldRender: \" + shouldRender);\n      if(!firebase.apps.length){\n          firebase.initializeApp(config)\n      }\n    })\n\n    const writeJsonFile = require('write-json-file');\n\n    const [data,setData] = useState([]);\n        \n    const [values,setValues] = useState({newMovieID:\"\"}) \n\n    const handleTextChange = event =>{\n      console.log(event.target.name,\"new movie is:\" + event.target.value)\n      console.log(\"event.target.name is:\" + event.target.name)\n      setValues({    \n        [event.target.name]: event.target.value, \n        });\n        console.log(\"values.newMovieID\" + values.newMovieID)\n    };\n     \n    \n\n    //Submission function\n    const handleSubmit = event =>{  \n      console.log(\"enter submit callback for adding a new movie\")\n      event.preventDefault();\n      console.log(\"At submission, values.newMovieID is: \"+values.newMovieID)\n      let alreadyExist = false;\n      \n      //get a reference to the database\n      let AllLists = firebase.database().ref('AllLists')\n      let allMovies = AllLists.child('All')\n\n      allMovies.on( 'value', snapshot => {\n        const receivedJSON = snapshot.val()\n        console.log(receivedJSON);\n        snapshot.forEach(function(childSnapshot){\n          var IMDbID = childSnapshot.child(\"IMDbID\").val();\n          if(IMDbID == values.newMovieID){\n            alreadyExist = true;\n          }\n        })\n      })\n\n      if(alreadyExist)\n        console.log(\"❌Movie already in database, not added\")\n      else  \n        console.log('✅ Movie not in database, now add')\n\n      //if not existed in our own database, find it in IMDB and store to our own\n      if(!alreadyExist){\n        const axios = require('axios').default; // axios.<method> will now provide autocomplete and parameter typings\n        \n        \n            let url=\"https://www.omdbapi.com/?apikey=16e23e6c&i=\" + values.newMovieID;\n            let recvPack = axios.get(url);\n            let packData     ;\n            let recvTitle    ;\n            let recvDirector ;\n            let recvRating   ;\n            let recvPosterURL;\n            let recvActors   ;\n            let recvGenre    ;\n            axios.get(url)  \n            .then(response => {\n                //A unique ID, Title, Poster source, Director, IMDbID, Actors\n                packData      = response.data;\n                recvTitle     = packData.Title;\n                recvDirector  = packData.Director;\n                recvRating    = packData.imdbRating;\n                recvPosterURL = packData.Poster;\n                recvActors    = packData.Actors;\n                recvGenre     = packData.Genre;\n                //console.log(movieURLs[index])\n                //movieArray[index].title = packData.data.Title;                  //new value    \n            })\n            .then(() => {\n                console.log(\"recvTitle is: \"+ recvTitle)\n                console.log(\"recvDirector is: \"+ recvDirector)\n                console.log(\"recvRating is: \"+ recvRating)\n                console.log(\"recvPosterURL is: \"+ recvPosterURL)\n                console.log(\"recvActors is: \"+ recvActors)  \n                console.log(\"recvGenre is: \"+ recvGenre)  \n                firebase.database().ref('AllLists').child('All').push(\n                  {IMDbID: values.newMovieID,\n                  Title: recvTitle,\n                  PosterURL: recvPosterURL,\n                  Director: recvDirector,\n                  Actors: recvActors,\n                  Genre: recvGenre\n                }\n                  );  \n                  \n                  movie_list.push({\"key\": 16, \"id\": values.newMovieID});\n                  (async () => {\n                    await writeJsonFile('./movie_list.json', movie_list);\n                })();\n            })\n        \n\n        \n      }\n      \n      setVisible(true);          \n      //set everything to default after submission\n      setValues({newMovieID:\"\"}) \n      \n      \n  }\n                                             \n\n                                                        \n      //used for configuring the alert box\n    const [visible, setVisible] = useState(false);\n    const onafterprint = () => setVisible(false);\n\nreturn(\n    <div className=\"GuestBook\" style={guestBookStyle}>\n        <form onSubmit={handleSubmit} noValidate>\n        \n          <div style={formInputDivStyle}> \n            <label style={formLabelFontStyle}>IMDBid</label>\n            <br/>\n            <input name=\"newMovieID\" type=\"newMovieID\" value={values.newMovieID} onChange={handleTextChange} style={formInputFontStyle}/>\n          </div>\n          \n  \n          <div style={formInputDivStyle} onClick={handleSubmit} >\n            <button type=\"submit\">submit</button>\n          </div>\n\n          \n          <Alert style={formInputDivStyle} color=\"info\" isOpen={visible} toggle={onafterprint} fade={true} >\n            Add request sent!\n          </Alert>\n        </form>\n        \n    </div>\n)\n\n\n}\n\nexport default AddMovie;"]},"metadata":{},"sourceType":"module"}