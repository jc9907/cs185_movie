{"ast":null,"code":"/*\nCustom React Hooks\n*/\nimport { useState } from \"react\"; //react hooks generally have an internal state\n\n/*\nHow useForm works:\nit takes in an input callback(in GuestBook it is the function \"submit\"), for this hook to use\n\ntwo functions handleTextChange/handleSubmit and \"Values\" objects are passed back to the GuestBook\nand in GuestBook they are destructured like a struct\n\n*/\n\nconst useForm = (callback, validate_func) => {\n  //callback: passed from GuestBook(main form) to update values\n  //validate_func: passed from GuestBook to check if user inputs are acceptable/correct\n  //declare way to set values\n  const [values, setValues] = useState({\n    guestName: \"\",\n    description: \"\",\n    message: \"\",\n    isPrivate: false,\n    email: \"\",\n    date: \"\"\n  }); //pulling the tuple to values, and setValues is the setter function\n  //new state for errors\n\n  const [errors, setErrors] = useState({\n    guestName: \"\",\n    description: \"\",\n    message: \"\",\n    isPrivate: \"\",\n    email: \"\",\n    hasError: \"\"\n  }); //just like declaring values and its setter setValues\n\n  var currYear = new Date().getFullYear();\n  var currMonth = new Date().getMonth() + 1;\n  var currDay = new Date().getDate(); //Current Date\n\n  console.log(\"date is: \" + currMonth + \" \" + currDay); //declare way on change event. Once the input tab is clicked, handler function receives an event.\n\n  const handleTextChange = event => {\n    //DEBUG MESSAGE: grab target(of what you are typing in)\n    console.log(event.target.name, \"value is:\" + event.target.value); //setter function, to set values\n\n    setErrors(validate_func(values));\n    setValues({ ...values,\n      //'...' is the spread operator that iterate through objects declared in \"values\"\n      [event.target.name]: event.target.value,\n      //set name equal to the key\n      //overwrite the objects defined in const[values, setValues]\n      year: currYear,\n      month: currMonth,\n      day: currDay\n    });\n  };\n\n  const handleClickChange = event => {\n    if (event.target.checked && !event.target.value.isPrivate) {\n      setValues({ ...values,\n        isPrivate: true\n      });\n    } else if (!event.target.checked && event.target.value) {\n      setValues({ ...values,\n        isPrivate: false\n      });\n    }\n\n    console.log(event.target.name, \"value is:\" + event.target.value);\n  };\n  /*\n    value: specifies where the values are saved\n    onChange: callback/change handler\n  */\n  //Submission function\n\n\n  const handleSubmit = event => {\n    console.log(\"enter submit callback\");\n    event.preventDefault(); //prevent the default behavior so that the browser doesn't refresh itself\n\n    setErrors(validate_func(values)); //use validate_func(from formValidate.js) to check user input correctness \n    //and setErrors with object \"errors\" returned from formValidate\n\n    console.log(\"errors.hasError is: \" + errors.hasError);\n\n    if (errors.hasError == \"false\") {\n      //meaning no error is detected\n      callback(); //after submit is clicked, callback() function trigger to send to firebase\n    }\n  }; //returns values that will be used in GuestBook\n\n\n  return {\n    handleTextChange,\n    //return setter callback function\n    handleSubmit,\n    handleClickChange,\n    setValues,\n    //function method\n    setErrors,\n    //function method, return to GuestBook so after submission everything is reset \n    values,\n    //return set values\n    errors //return errors so that GuestBook can display feedback to user\n\n  };\n  /*Error Handling*/\n  //function that validates these errors\n  //pass these errors back to form\n};\n\nexport default useForm; //export so that in GuestBook/other form page can destructure the returns","map":{"version":3,"sources":["/home/luyao/Desktop/CS185/my_movie_site/src/components/useForm.js"],"names":["useState","useForm","callback","validate_func","values","setValues","guestName","description","message","isPrivate","email","date","errors","setErrors","hasError","currYear","Date","getFullYear","currMonth","getMonth","currDay","getDate","console","log","handleTextChange","event","target","name","value","year","month","day","handleClickChange","checked","handleSubmit","preventDefault"],"mappings":"AAAA;;;AAGA,SAAQA,QAAR,QAAuB,OAAvB,C,CAAgC;;AAEhC;;;;;;;;;AAQA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,aAAX,KAA4B;AAAG;AACC;AAG5C;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBL,QAAQ,CAAC;AAACM,IAAAA,SAAS,EAAC,EAAX;AAAcC,IAAAA,WAAW,EAAC,EAA1B;AAA6BC,IAAAA,OAAO,EAAC,EAArC;AAAwCC,IAAAA,SAAS,EAAC,KAAlD;AAAwDC,IAAAA,KAAK,EAAC,EAA9D;AAAiEC,IAAAA,IAAI,EAAC;AAAtE,GAAD,CAAnC,CALwC,CAKuE;AAC/G;;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBb,QAAQ,CAAC;AAACM,IAAAA,SAAS,EAAC,EAAX;AAAcC,IAAAA,WAAW,EAAC,EAA1B;AAA6BC,IAAAA,OAAO,EAAC,EAArC;AAAwCC,IAAAA,SAAS,EAAC,EAAlD;AAAqDC,IAAAA,KAAK,EAAC,EAA3D;AAA8DI,IAAAA,QAAQ,EAAC;AAAvE,GAAD,CAAnC,CAPwC,CAOyE;;AACjH,MAAIC,QAAQ,GAAI,IAAIC,IAAJ,GAAWC,WAAX,EAAhB;AACA,MAAIC,SAAS,GAAI,IAAIF,IAAJ,GAAWG,QAAX,KAAsB,CAAvC;AACA,MAAIC,OAAO,GAAI,IAAIJ,IAAJ,GAAWK,OAAX,EAAf,CAVwC,CAUD;;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAcL,SAAd,GAA0B,GAA1B,GAAgCE,OAA5C,EAXwC,CAYxC;;AACA,QAAMI,gBAAgB,GAAGC,KAAK,IAAG;AAC7B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,MAAN,CAAaC,IAAzB,EAA8B,cAAcF,KAAK,CAACC,MAAN,CAAaE,KAAzD,EAF6B,CAG7B;;AACAf,IAAAA,SAAS,CAACV,aAAa,CAACC,MAAD,CAAd,CAAT;AACAC,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AACW;AACnB,OAACqB,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE,KAF1B;AAEiC;AACD;AACxCC,MAAAA,IAAI,EAAEd,QAJE;AAKRe,MAAAA,KAAK,EAAEZ,SALC;AAMRa,MAAAA,GAAG,EAACX;AANI,KAAD,CAAT;AAWD,GAhBH;;AAoBE,QAAMY,iBAAiB,GAAGP,KAAK,IAAG;AAEhC,QAAGA,KAAK,CAACC,MAAN,CAAaO,OAAb,IAAwB,CAACR,KAAK,CAACC,MAAN,CAAaE,KAAb,CAAmBnB,SAA/C,EAAyD;AACvDJ,MAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAENK,QAAAA,SAAS,EAAC;AAFJ,OAAD,CAAT;AAIC,KALH,MAKQ,IAAG,CAACgB,KAAK,CAACC,MAAN,CAAaO,OAAd,IAAyBR,KAAK,CAACC,MAAN,CAAaE,KAAzC,EAA+C;AACrDvB,MAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAENK,QAAAA,SAAS,EAAC;AAFJ,OAAD,CAAT;AAIC;;AACDa,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAK,CAACC,MAAN,CAAaC,IAAzB,EAA8B,cAAcF,KAAK,CAACC,MAAN,CAAaE,KAAzD;AACH,GAdD;AAeA;;;;AAKA;;;AACA,QAAMM,YAAY,GAAGT,KAAK,IAAG;AAC3BH,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAE,IAAAA,KAAK,CAACU,cAAN,GAF2B,CAEH;;AACxBtB,IAAAA,SAAS,CAACV,aAAa,CAACC,MAAD,CAAd,CAAT,CAH2B,CAGO;AACF;;AAChCkB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBX,MAAM,CAACE,QAA5C;;AACM,QAAGF,MAAM,CAACE,QAAP,IAAmB,OAAtB,EAA8B;AAAG;AAE/BZ,MAAAA,QAAQ,GAFoB,CAEJ;AAC7B;AACF,GAVH,CAtDsC,CAkEtC;;;AACA,SAAM;AACAsB,IAAAA,gBADA;AACwB;AACxBU,IAAAA,YAFA;AAGAF,IAAAA,iBAHA;AAIA3B,IAAAA,SAJA;AAIsB;AACtBQ,IAAAA,SALA;AAKsB;AACtBT,IAAAA,MANA;AAMqB;AACrBQ,IAAAA,MAPA,CAOoB;;AAPpB,GAAN;AAaA;AAEA;AAEA;AACL,CArFD;;AAuFA,eAAeX,OAAf,C,CAAwB","sourcesContent":["/*\nCustom React Hooks\n*/\nimport {useState} from \"react\"; //react hooks generally have an internal state\n\n/*\nHow useForm works:\nit takes in an input callback(in GuestBook it is the function \"submit\"), for this hook to use\n\ntwo functions handleTextChange/handleSubmit and \"Values\" objects are passed back to the GuestBook\nand in GuestBook they are destructured like a struct\n\n*/\nconst useForm = (callback, validate_func) =>{  //callback: passed from GuestBook(main form) to update values\n                                                //validate_func: passed from GuestBook to check if user inputs are acceptable/correct\n    \n    \n    //declare way to set values\n    const [values,setValues] = useState({guestName:\"\",description:\"\",message:\"\",isPrivate:false,email:\"\",date:\"\"}) //pulling the tuple to values, and setValues is the setter function\n    //new state for errors\n    const [errors,setErrors] = useState({guestName:\"\",description:\"\",message:\"\",isPrivate:\"\",email:\"\",hasError:\"\"}); //just like declaring values and its setter setValues\n    var currYear = (new Date().getFullYear());\n    var currMonth = (new Date().getMonth()+1);\n    var currDay = (new Date().getDate());  //Current Date\n    console.log(\"date is: \" + currMonth + \" \" + currDay)\n    //declare way on change event. Once the input tab is clicked, handler function receives an event.\n    const handleTextChange = event =>{\n        //DEBUG MESSAGE: grab target(of what you are typing in)\n        console.log(event.target.name,\"value is:\" + event.target.value)\n        //setter function, to set values\n        setErrors(validate_func(values));\n        setValues({\n          ...values,         //'...' is the spread operator that iterate through objects declared in \"values\"\n          [event.target.name]: event.target.value, //set name equal to the key\n                                                  //overwrite the objects defined in const[values, setValues]\n          year: currYear,\n          month: currMonth,\n          day:currDay\n          });\n\n\n        \n      };\n       \n\n\n      const handleClickChange = event =>{\n        \n        if(event.target.checked && !event.target.value.isPrivate){\n          setValues({\n            ...values,\n              isPrivate:true\n          })\n          }else if(!event.target.checked && event.target.value){\n          setValues({\n            ...values,\n              isPrivate:false\n          })\n          }\n          console.log(event.target.name,\"value is:\" + event.target.value)\n      }\n      /*\n        value: specifies where the values are saved\n        onChange: callback/change handler\n      */\n  \n      //Submission function\n      const handleSubmit = event =>{  \n        console.log(\"enter submit callback\")\n        event.preventDefault(); //prevent the default behavior so that the browser doesn't refresh itself\n        setErrors(validate_func(values)); //use validate_func(from formValidate.js) to check user input correctness \n                                        //and setErrors with object \"errors\" returned from formValidate\n        console.log(\"errors.hasError is: \" + errors.hasError)\n              if(errors.hasError == \"false\"){  //meaning no error is detected\n              \n                callback();             //after submit is clicked, callback() function trigger to send to firebase\n          }\n        }\n\n      //returns values that will be used in GuestBook\n      return{\n            handleTextChange,       //return setter callback function\n            handleSubmit,\n            handleClickChange,\n            setValues,            //function method\n            setErrors,            //function method, return to GuestBook so after submission everything is reset \n            values,              //return set values\n            errors              //return errors so that GuestBook can display feedback to user\n      }\n\n\n\n\n      /*Error Handling*/\n      \n      //function that validates these errors\n\n      //pass these errors back to form\n};\n\nexport default useForm; //export so that in GuestBook/other form page can destructure the returns"]},"metadata":{},"sourceType":"module"}