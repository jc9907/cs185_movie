{"ast":null,"code":"var _jsxFileName = \"/Users/Jiachen/Documents/my_movie_site/src/components/MovieGallery.js\";\nimport React, { useState, Component } from \"react\";\nimport Movie from \"./movie_element.js\";\nimport GridList from \"@material-ui/core/GridList\";\nimport Modal from \"@material-ui/core/Modal\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"@material-ui/core/Select\";\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\nimport config from \"./config.js\";\n\nfunction rootStyle() {\n  return {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\"\n  };\n}\n\nfunction GridListStyle() {\n  return {\n    width: \"95%\",\n    height: \"85vh\",\n    transform: \"translateZ(0)\"\n  };\n}\n\nfunction info() {\n  return {\n    width: \"auto\",\n    height: \"auto\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    paddingTop: \"23%\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n    lineHeight: \"200%\",\n    backgroundColor: \"#c3cfe2\"\n  };\n}\n\nfunction getModalStyle() {\n  return {\n    top: \"20%\",\n    left: \"20%\",\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    display: \"flex\"\n  };\n} //Fetch data from firebase\n\n\nconst firebase = require(\"firebase\");\n\nexport default class MovieGallery extends Component {\n  constructor() {\n    super();\n    this.state = {\n      moviePoster: \"\",\n      open: false,\n      key: 1,\n      isOpen: false,\n      toggle: 0,\n      visible: 8,\n      movies_list: [],\n      perf_listSelection: [],\n      listShown: [],\n      movie_perf_pairs: []\n    };\n\n    this.changeMoviePoster = data => {\n      this.setState({\n        moviePoster: data\n      });\n    };\n\n    this.changeKey = k => {\n      this.setState({\n        key: k\n      });\n    };\n\n    this.setOpen = o => {\n      this.setState({\n        open: o\n      });\n    };\n\n    this.loadmore = this.loadmore.bind(this); //bind evnt handler!\n\n    this.listSelectOnChange = this.listSelectOnChange.bind(this);\n    this.ModalDropOptions = this.ModalDropOptions.bind(this);\n    this.perf_list = []; //initialize firebase\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n  }\n\n  loadmore() {\n    this.setState(old => {\n      return {\n        visible: old.visible + 8\n      }; //trys to set visible 8 more movies\n    });\n  }\n\n  componentWillMount() {\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n\n    console.log(\"component will mount!\");\n    let AllLists = firebase.database().ref(\"AllLists\");\n    let allMovies = AllLists.child(\"All\");\n    var recvObjects = [];\n    var cnt = 0;\n    allMovies.on(\"value\", snapshot => {\n      const receivedJSON = snapshot.val(); //console.log(receivedJSON);\n      //loop through all movies in database\n\n      snapshot.forEach(function (childSnapshot) {\n        //receive single movie info\n        var recvIMDbID = childSnapshot.child(\"IMDbID\").val();\n        var recvTitle = childSnapshot.child(\"Title\").val();\n        var recvDirector = childSnapshot.child(\"Director\").val();\n        var recvRating = childSnapshot.child(\"Rating\").val();\n        var recvPosterURL = childSnapshot.child(\"PosterURL\").val();\n        var recvActors = childSnapshot.child(\"Actors\").val();\n        var recvGenre = childSnapshot.child(\"Genre\").val();\n        var recvKey = childSnapshot.child(\"IMDbID\").val();\n        recvObjects.push({\n          key: recvKey,\n          IMDbID: recvIMDbID,\n          Title: recvTitle,\n          PosterURL: recvPosterURL,\n          Director: recvDirector,\n          Actors: recvActors,\n          Genre: recvGenre,\n          Rating: recvRating\n        });\n      });\n      this.setState({\n        movies_list: [...this.state.movies_list, ...recvObjects]\n      });\n    });\n    var perfArraySelection = [];\n    var cnt = 0;\n    AllLists.on(\"value\", snapshot => {\n      const receivedJSON = snapshot.val();\n      snapshot.forEach((item, index) => {\n        perfArraySelection.push(item.key); //get the list\n      });\n      this.setState({\n        perf_listSelection: [...this.state.perf_listSelection, ...perfArraySelection]\n      });\n    });\n    var perfArray = [];\n    var movie = [];\n    var cnt = 0;\n    var moviesMasterArray = [];\n    var moviesInOneArray = [];\n    AllLists.on(\"value\", snapshot => {\n      const receivedJSON = snapshot.val();\n      snapshot.forEach((eachList, index) => {\n        eachList.forEach(function (singleMovie) {\n          var recvIMDbID = singleMovie.child(\"IMDbID\").val();\n          var recvTitle = singleMovie.child(\"Title\").val();\n          var recvDirector = singleMovie.child(\"Director\").val();\n          var recvRating = singleMovie.child(\"Rating\").val();\n          var recvPosterURL = singleMovie.child(\"PosterURL\").val();\n          var recvActors = singleMovie.child(\"Actors\").val();\n          var recvGenre = singleMovie.child(\"Genre\").val();\n          var recvKey = singleMovie.child(\"IMDbID\").val();\n          moviesInOneArray.push({\n            key: recvKey,\n            IMDbID: recvIMDbID,\n            Title: recvTitle,\n            PosterURL: recvPosterURL,\n            Director: recvDirector,\n            Actors: recvActors,\n            Genre: recvGenre,\n            Rating: recvRating\n          });\n        }); //collected all movies in one list\n      });\n      moviesMasterArray.push(moviesInOneArray); //console.log(moviesMasterArray)\n\n      this.perf_list = moviesMasterArray; // this.setState({\n      //   perf_list:[...moviesMasterArray]\n      // })\n      // /console.log(\"moviesMasterArray\"+moviesMasterArray)\n      //console.log(\"perf list is \"+this.state.perf_list)\n\n      this.forceUpdate(); //console.log(this.state.perf_list[1]); //sets to the All list\n      //set to listShown so that gallery display the correct posters\n\n      this.setState({\n        listShown: [...this.perf_list[0]]\n      });\n    });\n    this.forceUpdate(); //\n    //  Prepare movie-perferencelist pairs\n    //\n\n    console.log(\"printing perf names\");\n    var movie_perf_Array = [];\n    AllLists.on(\"value\", snapshot => {\n      const receivedJSON = snapshot.val();\n      snapshot.child(\"movie_perf_pairs\").forEach((eachPair, index) => {\n        //all the lists\n        var recvIMDbID = eachPair.child(\"IMDbID\").val();\n        console.log(\"movie is: \" + recvIMDbID);\n        eachPair.child(\"perfs\").forEach((perfName, index) => {\n          console.log(perfName.val());\n        }); //collected all movies in one list\n      });\n      moviesMasterArray.push(moviesInOneArray); //console.log(moviesMasterArray)\n\n      this.perf_list = moviesMasterArray; // this.setState({\n      //   perf_list:[...moviesMasterArray]\n      // })\n      // /console.log(\"moviesMasterArray\"+moviesMasterArray)\n      //console.log(\"perf list is \"+this.state.perf_list)\n\n      this.forceUpdate(); //console.log(this.state.perf_list[1]); //sets to the All list\n      //set to listShown so that gallery display the correct posters\n\n      this.setState({\n        listShown: [...this.perf_list[0]]\n      });\n    });\n    this.forceUpdate();\n  } //user chosed list of movie to display in gallery\n\n\n  listSelectOnChange(e) {\n    console.log(\"target value: \" + e.target.index); //set it to the state\n\n    this.setState({\n      [this.state.active_list]: this.state.perf_listSelection[e.target.index]\n    });\n    console.log(\"list selected: \" + this.state.list_selected);\n  }\n\n  ModalDropOptions(e) {\n    this.state.perf_listSelection.map((e, key) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: key,\n        value: e.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }\n      }, e);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }, \"Select List\", /*#__PURE__*/React.createElement(\"select\", {\n      name: \"perf_listSelection\",\n      onChange: this.listSelectOnChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    }, this.state.perf_listSelection.map((e, key) => {\n      //console.log(\"key is \"+ key)\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: key,\n        value: e.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 17\n        }\n      }, e);\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }\n    }, this.state.movies_list.map((s, index) => /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 13\n      }\n    }, s.Title))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GridList, {\n      cellHeight: 150,\n      spacing: 1,\n      style: GridListStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, this.state.movies_list.map(movie => /*#__PURE__*/React.createElement(Movie, {\n      movieid: movie.IMDbID,\n      indexKey: movie.key,\n      changeIndexKey: this.changeKey,\n      setOpen: this.setOpen,\n      changeMoviePoster: this.changeMoviePoster,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(Modal, {\n      open: this.state.open,\n      onClose: () => {\n        this.setOpen(false);\n      },\n      \"aria-labelledby\": \"simple-modal-title\",\n      \"aria-describedby\": \"simple-modal-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: getModalStyle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: info(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h7\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 19\n      }\n    }, \"Title: \", this.state.moviePoster.Title, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 59\n      }\n    }), \"Director: \", this.state.moviePoster.Director, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 65\n      }\n    }), \"Genre: \", this.state.moviePoster.Genre, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }\n    }), \"IMDB Rating: \", this.state.moviePoster.imdbRating), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      name: \"perf_listSelection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }\n    }, this.ModalDropOptions))), /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.moviePoster.Poster,\n      height: \"auto\",\n      alt: \"poster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => {\n        const deleteTargetKey = this.state.key;\n        var newMovieArray = [];\n        this.state.movies_list.forEach((item, index) => {\n          console.log(\"item key\" + item.key);\n\n          if (item.key != this.state.key) {\n            newMovieArray.push(item);\n          }\n        });\n        console.log(newMovieArray);\n        this.setState({\n          movies_list: []\n        });\n        this.setState({\n          movies_list: [...newMovieArray]\n        });\n        this.setOpen(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(DeleteSweepIcon, {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 19\n      }\n    })))), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.loadmore,\n      style: {\n        position: \"relative\",\n        alignItems: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }\n    }, \"Load More\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/Jiachen/Documents/my_movie_site/src/components/MovieGallery.js"],"names":["React","useState","Component","Movie","GridList","Modal","IconButton","DeleteSweepIcon","MenuItem","FormControl","ListItemText","Select","ButtonDropdown","DropdownToggle","DropdownMenu","DropdownItem","config","rootStyle","display","flexWrap","justifyContent","overflow","GridListStyle","width","height","transform","info","textAlign","paddingTop","paddingLeft","paddingRight","lineHeight","backgroundColor","getModalStyle","top","left","position","firebase","require","MovieGallery","constructor","state","moviePoster","open","key","isOpen","toggle","visible","movies_list","perf_listSelection","listShown","movie_perf_pairs","changeMoviePoster","data","setState","changeKey","k","setOpen","o","loadmore","bind","listSelectOnChange","ModalDropOptions","perf_list","apps","length","initializeApp","old","componentWillMount","console","log","AllLists","database","ref","allMovies","child","recvObjects","cnt","on","snapshot","receivedJSON","val","forEach","childSnapshot","recvIMDbID","recvTitle","recvDirector","recvRating","recvPosterURL","recvActors","recvGenre","recvKey","push","IMDbID","Title","PosterURL","Director","Actors","Genre","Rating","perfArraySelection","item","index","perfArray","movie","moviesMasterArray","moviesInOneArray","eachList","singleMovie","forceUpdate","movie_perf_Array","eachPair","perfName","e","target","active_list","list_selected","map","value","render","s","imdbRating","Poster","deleteTargetKey","newMovieArray","color","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, Component } from \"react\";\n\nimport Movie from \"./movie_element.js\";\nimport GridList from \"@material-ui/core/GridList\";\nimport Modal from \"@material-ui/core/Modal\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Select from \"@material-ui/core/Select\";\nimport {\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport config from \"./config.js\";\n\nfunction rootStyle() {\n  return {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n  };\n}\nfunction GridListStyle() {\n  return {\n    width: \"95%\",\n    height: \"85vh\",\n    transform: \"translateZ(0)\",\n  };\n}\nfunction info() {\n  return {\n    width: \"auto\",\n    height: \"auto\",\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    paddingTop: \"23%\",\n    paddingLeft: \"10px\",\n    paddingRight: \"10px\",\n    lineHeight: \"200%\",\n    backgroundColor: \"#c3cfe2\",\n  };\n}\nfunction getModalStyle() {\n  return {\n    top: \"20%\",\n    left: \"20%\",\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    display: \"flex\",\n  };\n}\n\n//Fetch data from firebase\nconst firebase = require(\"firebase\");\n\nexport default class MovieGallery extends Component {\n  constructor() {\n    super();\n    this.state = {\n      moviePoster: \"\",\n      open: false,\n      key: 1,\n      isOpen: false,\n      toggle: 0,\n      visible: 8,\n      movies_list: [],\n      perf_listSelection: [],\n      listShown: [],\n      movie_perf_pairs: [],\n    };\n    this.changeMoviePoster = (data) => {\n      this.setState({\n        moviePoster: data,\n      });\n    };\n    this.changeKey = (k) => {\n      this.setState({\n        key: k,\n      });\n    };\n    this.setOpen = (o) => {\n      this.setState({\n        open: o,\n      });\n    };\n\n    this.loadmore = this.loadmore.bind(this); //bind evnt handler!\n    this.listSelectOnChange = this.listSelectOnChange.bind(this);\n    this.ModalDropOptions = this.ModalDropOptions.bind(this);\n    this.perf_list = [];\n    //initialize firebase\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n  }\n\n  loadmore() {\n    this.setState((old) => {\n      return { visible: old.visible + 8 }; //trys to set visible 8 more movies\n    });\n  }\n\n  componentWillMount() {\n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n    console.log(\"component will mount!\");\n    let AllLists = firebase.database().ref(\"AllLists\");\n    let allMovies = AllLists.child(\"All\");\n\n    var recvObjects = [];\n    var cnt = 0;\n    allMovies.on(\"value\", (snapshot) => {\n      const receivedJSON = snapshot.val();\n      //console.log(receivedJSON);\n\n      //loop through all movies in database\n      snapshot.forEach(function (childSnapshot) {\n        //receive single movie info\n        var recvIMDbID = childSnapshot.child(\"IMDbID\").val();\n        var recvTitle = childSnapshot.child(\"Title\").val();\n        var recvDirector = childSnapshot.child(\"Director\").val();\n        var recvRating = childSnapshot.child(\"Rating\").val();\n        var recvPosterURL = childSnapshot.child(\"PosterURL\").val();\n        var recvActors = childSnapshot.child(\"Actors\").val();\n        var recvGenre = childSnapshot.child(\"Genre\").val();\n        var recvKey = childSnapshot.child(\"IMDbID\").val();\n        recvObjects.push({\n          key: recvKey,\n          IMDbID: recvIMDbID,\n          Title: recvTitle,\n          PosterURL: recvPosterURL,\n          Director: recvDirector,\n          Actors: recvActors,\n          Genre: recvGenre,\n          Rating: recvRating,\n        });\n      });\n\n      this.setState({\n        movies_list: [...this.state.movies_list, ...recvObjects],\n      });\n    });\n\n    var perfArraySelection = [];\n    var cnt = 0;\n    AllLists.on(\"value\", (snapshot) => {\n      const receivedJSON = snapshot.val();\n\n      snapshot.forEach((item, index) => {\n        perfArraySelection.push(item.key); //get the list\n      });\n      this.setState({\n        perf_listSelection: [\n          ...this.state.perf_listSelection,\n          ...perfArraySelection,\n        ],\n      });\n    });\n\n    var perfArray = [];\n    var movie = [];\n    var cnt = 0;\n    var moviesMasterArray = [];\n    var moviesInOneArray = [];\n    AllLists.on(\"value\", (snapshot) => {\n      const receivedJSON = snapshot.val();\n\n      snapshot.forEach((eachList, index) => {\n        eachList.forEach(function (singleMovie) {\n          var recvIMDbID = singleMovie.child(\"IMDbID\").val();\n          var recvTitle = singleMovie.child(\"Title\").val();\n          var recvDirector = singleMovie.child(\"Director\").val();\n          var recvRating = singleMovie.child(\"Rating\").val();\n          var recvPosterURL = singleMovie.child(\"PosterURL\").val();\n          var recvActors = singleMovie.child(\"Actors\").val();\n          var recvGenre = singleMovie.child(\"Genre\").val();\n          var recvKey = singleMovie.child(\"IMDbID\").val();\n          moviesInOneArray.push({\n            key: recvKey,\n            IMDbID: recvIMDbID,\n            Title: recvTitle,\n            PosterURL: recvPosterURL,\n            Director: recvDirector,\n            Actors: recvActors,\n            Genre: recvGenre,\n            Rating: recvRating,\n          });\n        });\n        //collected all movies in one list\n      });\n      moviesMasterArray.push(moviesInOneArray);\n      //console.log(moviesMasterArray)\n\n      this.perf_list = moviesMasterArray;\n      // this.setState({\n      //   perf_list:[...moviesMasterArray]\n      // })\n      // /console.log(\"moviesMasterArray\"+moviesMasterArray)\n      //console.log(\"perf list is \"+this.state.perf_list)\n      this.forceUpdate();\n      //console.log(this.state.perf_list[1]); //sets to the All list\n\n      //set to listShown so that gallery display the correct posters\n      this.setState({\n        listShown: [...this.perf_list[0]],\n      });\n    });\n    this.forceUpdate();\n\n    //\n    //  Prepare movie-perferencelist pairs\n    //\n    console.log(\"printing perf names\");\n    var movie_perf_Array = [];\n    AllLists.on(\"value\", (snapshot) => {\n      const receivedJSON = snapshot.val();\n      snapshot.child(\"movie_perf_pairs\").forEach((eachPair, index) => {\n        //all the lists\n        var recvIMDbID = eachPair.child(\"IMDbID\").val();\n        console.log(\"movie is: \" + recvIMDbID);\n        eachPair.child(\"perfs\").forEach((perfName, index) => {\n          console.log(perfName.val());\n        });\n\n        //collected all movies in one list\n      });\n      moviesMasterArray.push(moviesInOneArray);\n      //console.log(moviesMasterArray)\n\n      this.perf_list = moviesMasterArray;\n      // this.setState({\n      //   perf_list:[...moviesMasterArray]\n      // })\n      // /console.log(\"moviesMasterArray\"+moviesMasterArray)\n      //console.log(\"perf list is \"+this.state.perf_list)\n      this.forceUpdate();\n      //console.log(this.state.perf_list[1]); //sets to the All list\n\n      //set to listShown so that gallery display the correct posters\n      this.setState({\n        listShown: [...this.perf_list[0]],\n      });\n    });\n    this.forceUpdate();\n  }\n\n  //user chosed list of movie to display in gallery\n  listSelectOnChange(e) {\n    console.log(\"target value: \" + e.target.index);\n    //set it to the state\n    this.setState({\n      [this.state.active_list]: this.state.perf_listSelection[e.target.index],\n    });\n\n    console.log(\"list selected: \" + this.state.list_selected);\n  }\n\n  ModalDropOptions(e) {\n    this.state.perf_listSelection.map((e, key) => {\n      return (\n        <option key={key} value={e.value}>\n          {e}\n        </option>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ display: \"block\" }}>\n        <div>\n          Select List\n          <select name=\"perf_listSelection\" onChange={this.listSelectOnChange}>\n            {this.state.perf_listSelection.map((e, key) => {\n              //console.log(\"key is \"+ key)\n              return (\n                <option key={key} value={e.value}>\n                  {e}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n\n        <div>\n          {this.state.movies_list.map((s, index) => (\n            <h6>{s.Title}</h6>\n          ))}\n        </div>\n\n        <div>\n          <GridList cellHeight={150} spacing={1} style={GridListStyle()}>\n            {/*{this.state.movies_list.slice(0,this.state.visible).map((movie) => (  */}\n\n            {this.state.movies_list.map((movie) => (\n              <Movie\n                movieid={movie.IMDbID}\n                indexKey={movie.key}\n                changeIndexKey={this.changeKey}\n                setOpen={this.setOpen}\n                changeMoviePoster={this.changeMoviePoster}\n              />\n            ))}\n          </GridList>\n\n          <Modal\n            open={this.state.open}\n            onClose={() => {\n              this.setOpen(false);\n            }}\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n          >\n            {\n              <div style={getModalStyle()}>\n                <div style={info()}>\n                  <h7>\n                    Title: {this.state.moviePoster.Title} <br />\n                    Director: {this.state.moviePoster.Director} <br />\n                    Genre: {this.state.moviePoster.Genre}\n                    <br />\n                    IMDB Rating: {this.state.moviePoster.imdbRating}\n                  </h7>\n                  <div>\n                    <select name=\"perf_listSelection\">\n                      {this.ModalDropOptions}\n                    </select>\n                  </div>\n                </div>\n                <img\n                  src={this.state.moviePoster.Poster}\n                  height={\"auto\"}\n                  alt={\"poster\"}\n                />\n\n                <IconButton\n                  onClick={() => {\n                    const deleteTargetKey = this.state.key;\n                    var newMovieArray = [];\n                    this.state.movies_list.forEach((item, index) => {\n                      console.log(\"item key\" + item.key);\n                      if (item.key != this.state.key) {\n                        newMovieArray.push(item);\n                      }\n                    });\n                    console.log(newMovieArray);\n                    this.setState({\n                      movies_list: [],\n                    });\n\n                    this.setState({\n                      movies_list: [...newMovieArray],\n                    });\n\n                    this.setOpen(false);\n                  }}\n                >\n                  <DeleteSweepIcon style={{ color: \"red\" }} />\n                </IconButton>\n              </div>\n            }\n          </Modal>\n\n          <button\n            type=\"button\"\n            onClick={this.loadmore}\n            style={{ position: \"relative\", alignItems: \"center\" }}\n          >\n            Load More\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}